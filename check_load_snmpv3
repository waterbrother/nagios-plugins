#!/usr/bin/ruby

require 'optparse'

################################################################################
# DEFINITIONS
################################################################################
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3


one_min_oid = ".1.3.6.1.4.1.2021.10.1.3.1"
five_min_oid = ".1.3.6.1.4.1.2021.10.1.3.2"
fifteen_min_oid = ".1.3.6.1.4.1.2021.10.1.3.3"

################################################################################
# OPTION PARSING
################################################################################
options = Hash.new
options[:host] = nil
options[:snmpuser] = nil
options[:authpass] = nil
options[:privpass] = nil
options[:authcrypt] = nil
options[:privcrypt] = nil
options[:warnlevel] = nil
options[:critlevel] = nil
options[:debug] = false


OptionParser.new do |opts|
	opts.banner = "Usage: "

	opts.on("-H", "--host HOST", "the host to monitor") do |v|
		options[:host] = v
	end

	opts.on("-u", "--user USER", "the SNMP user") do |v|
		options[:snmpuser] = v
	end

	opts.on("-A", "--authpass PASSWD", "the authetication password") do |v|
		options[:authpass] = v
	end

	opts.on("-X", "--privpass PASSWD", "the encryption password") do |v|
		options[:privpass] = v
	end

	opts.on("-a", "--authcrypt ALGORITHM", "the authpass encryption algorithm") do |v|
		options[:authcrypt] = v
	end

	opts.on("-x", "--privcrypt ALGORITHM", "the privpass encryption algorithm") do |v|
		options[:privcrypt] = v
	end

	opts.on("-w", "--warnlevel INT", "threshold of CPU load (1,5,15 min load avg.) to trigger warning status") do |v|
		options[:warnlevel] = v
	end

	opts.on("-c", "--critlevel INT", "threshold of CPU load (1,5,15 min load avg.) to trigger critical status") do |v|
		options[:critlevel] = v
	end

	opts.on("-d", "--debug", "toggle debug output") do
		options[:debug] = true
	end

	opts.on_tail("-h", "--help", "Print usage information") do
		puts opts
		exit
	end
end.parse!

#verify all options have been set
empty_opts = Array.new
options.each_pair do |k,v|
        if v == nil
                empty_opts << k.to_s
        end
end

if empty_opts.length > 0
        puts "ERROR - parameters #{empty_opts.join(', ')} are not set"
        exit UNKNOWN
end

#validate that warn and crit strings consist of 3 sets of 1 or more digite, delimited by commas
if options[:warnlevel] !~ /\d{1,},\d{1,},\d{1,}/
	puts "ERROR - warning threshold must use this format: <n>,<n>,<n>"
	exit UNKNOWN
elsif options[:critlevel] !~ /\d{1,},\d{1,},\d{1,}/
	puts "ERROR - critical threshold must use this format: <n>,<n>,<n>"
	exit UNKNOWN
end

if options[:debug] == true
	puts "warning level: #{options[:warnlevel]}"
	puts "critical level: #{options[:critlevel]}"
end

#split threshold argumentns into arrays
warn_levels = options[:warnlevel].split(',')
crit_levels = options[:critlevel].split(',')

################################################################################
# LOGIC
################################################################################
#check first here that we can read info via SNMP before continuing
uptime = `snmpwalk -v 3 -u #{options[:snmpuser]} -a #{options[:authcrypt]} -A #{options[:authpass]} -l authPriv -x #{options[:privcrypt]} -X #{options[:privpass]} #{options[:host]} hrSystemUptime.0 2>/dev/null`

if options[:debug] == true
	puts "SNMP uptime response: #{uptime}"
end

if uptime.length == 0
	puts "UNKNOWN - could not get a response from SNMP"
	exit UNKNOWN
end

#get the one minute load average
load_1 = `snmpwalk -v 3 -u #{options[:snmpuser]} -a #{options[:authcrypt]} -A #{options[:authpass]} -l authPriv -x #{options[:privcrypt]} -X #{options[:privpass]} #{options[:host]} #{one_min_oid}`.split(/\s/)[-1].to_f

if options[:debug] == true
	puts "one min load: #{load_1}"
end

#get the five minute load average
load_5 = `snmpwalk -v 3 -u #{options[:snmpuser]} -a #{options[:authcrypt]} -A #{options[:authpass]} -l authPriv -x #{options[:privcrypt]} -X #{options[:privpass]} #{options[:host]} #{five_min_oid}`.split(/\s/)[-1].to_f

if options[:debug] == true
	puts "five min load: #{load_5}"
end

#get the fifteen minute load average
load_15 = `snmpwalk -v 3 -u #{options[:snmpuser]} -a #{options[:authcrypt]} -A #{options[:authpass]} -l authPriv -x #{options[:privcrypt]} -X #{options[:privpass]} #{options[:host]} #{fifteen_min_oid}`.split(/\s/)[-1].to_f

if options[:debug] == true
	puts "fifteen min load: #{load_15}"
end

#print output and exit with rc
if load_1 !~ /Timeout/ and load_5 !~ /Timeout/ and load_15 !~ /Timeout/
	if load_1 >= crit_levels[0].to_i or load_5 >= crit_levels[1].to_i or load_15 >= crit_levels[2].to_i
		puts "CRITICAL - CPU load is #{load_1},#{load_5},#{load_15} | load_1=#{load_1} load_5=#{load_5} load_15=#{load_15}"
		exit CRITICAL
	elsif load_1 >= warn_levels[0].to_i or load_5 >= warn_levels[1].to_i or load_15 >= warn_levels[2].to_i
		puts "WARNING - CPU load is #{load_1},#{load_5},#{load_15} | load_1=#{load_1} load_5=#{load_5} load_15=#{load_15}"
		exit WARNING
	else
		puts "OK - CPU load is #{load_1},#{load_5},#{load_15} | load_1=#{load_1} load_5=#{load_5} load_15=#{load_15}"
		exit OK
	end
else
	puts "UNKNOWN - SNMP request timed out | load_1=0 load_5=0 load_15=0"
	exit UNKNOWN
end

